
Interview Questions:

Q) what is GIT and why we need to use GIT?
Q) what stage on GIT and explain them?
Q) difference between CVCS and BVCS
Q) How to check commits in GIT?
Q) Explaain Brances in GIT?

8th:----

********************************** GIT ***************************
>> GIT = Global Information Tracker
         - Git is also called as version controll system(VCS) or SourceCode Management(SCM)
         - Git and linux were created by Linus Benedict Torvalds
>> GIT:
   -Git is used to track the files
   -it will maintain multiple versions of the same file
   -It is platform independent
   -It is free and open source
   -They can handle larger projects efficiently
   -it is written on c programming
   Q) -It is 3rd generation of VCS
   - it came in the year 2005
    
      
    > VCS = - it will keep the code separately for each version
                          ||
v-1   : stores 100 lines of code in repsitory1(repo-1)
v-2   : stores 200 lines of code in repsitory2(repo-2)
v-3   : stores 300 lines of code in repsitory3(repo-3)

REPO   : It is a folder where we store our code
index.html: it is a basic file for every application

v1 --- > index.html
v2 --- > index.html
v3 --- > index.html 

> CVCS: CENTRALIZED VERSION CONTROL SYSTEM
  EX: SVN: it can store code on a single repo.

> DVCS: DISTRIBUTED VERSION CONTROL SYSTEM
  EX: GIT: it can store code on Multiple repo.

> ROLLBACK: Going back to the previous version of the application

>>Git Stages:
 WORKING DIRECTORY: where we write our source code
 STAGING AREA : we track files here
 REPOSITORY : Where we stoore tracked source code

>>WORKING WITH GIT:
create a ec2 server:
> mkdir swiggy                          : to create directory
> cd swiggy                             : to go inside the directory

> yum install git -y                    : to install git og latest version (yum = package manager, install = action , git = package name , -y= yes)
> git -v                                : to check version
> git init                              : to install .git (local repo)

> vim index.html (content is optional)  : to ceate file
> git status                            : to check status
> git add index.html                    : to track file
> git status                            : to check status
> git commit -m "commit-1" index.html   : to store file

   flow-> create a file ==> add ==> commit

> git log                               : to show commits
> git log -2                            : to show last two commits
> git log --oneline                     : to show commits in single line
> git log -2 --oneline                  : to show last two commits in single line



9th:----

>>CONFIGURATION USER AND EMAIL

> git config user.name "Durvesh"
> git config user.email "durvesh@gmail.com"

NOTE: this user and email will be replicated to the new commits only.

> git show                   : to show the files which are attached to commits
> git log --oneline          : to show commits in a one line
> git show commit_id         : to show files according to commit_id(commit address)

>>BRANCHES :
- It is a individual line ofdevelopment
- developers right the code on branches
- initially branches we create on a git
- after write source code on git we push to github
- Default branch is Master
Note:- when we do a iniatl commit the only default branch will be created.

Dev --> Git(Movies branch) --> code --> github

>> COMMANDS:

> git branch                                  : to list the branches
> git branch movies                           : to create the branch movies
> git checkout movies                         : to switch between the branches
> git checkout -b dth                         : to create and switch dth at the sane time
> git branch -m old_branch new_Branch         : to rename a branch
> git branch -D recharge                      : to delete a branch

PUSH commands:
> git init
> git add README.md
> git commit -m "first commit"
> git branch -M main
> git remote add origin https://github.com/Durvesh2003/file444.git
> git push -u origin main


Note: to recover the delete branch-
> git pull                                    : it will get the branch from GitHub to git
> git pull origin recharge
> git checkout recharge

>>PROCESS to push branch to GitHub
   > git branch movies
   > git checkout movies
   > touch movies{1..5}
   > git add movies*
   > git commit -m "dev-1" movies*

  Now push the code to GitHub:
   Create a repo
   > git remote add origin 

  PUSH: to send files from Git to Github 
  local: .git & remote: paytm.git
  > git remote add origin https://github.com/Durvesh2003/file444.git
  > git push origin movies
    (after this command it will say "everything upto date' and files will visible on githup repo)
  

  TOKEN GENERATION: 
   account -- > settings -- >developer settings -- > PAT -- > Classic -- >Generate new token -- > classic -- > name: abcd -- > select 6 options -- > generate 
   Note: it will be visible only once


