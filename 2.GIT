
Interview Questions:

Q) what is GIT and why we need to use GIT?
Q) what stage on GIT and explain them?
Q) difference between CVCS and BVCS
Q) How to check commits in GIT?
Q) Explaain Brances in GIT?

8th:----

********************************** GIT ***************************
>> GIT = Global Information Tracker
         - Git is also called as version controll system(VCS) or SourceCode Management(SCM)
         - Git and linux were created by Linus Benedict Torvalds
>> GIT:
   -Git is used to track the files
   -it will maintain multiple versions of the same file
   -It is platform independent
   -It is free and open source
   -They can handle larger projects efficiently
   -it is written on c programming
   Q) -It is 3rd generation of VCS
   - it came in the year 2005
    
      
    > VCS = - it will keep the code separately for each version
                          ||
v-1   : stores 100 lines of code in repsitory1(repo-1)
v-2   : stores 200 lines of code in repsitory2(repo-2)
v-3   : stores 300 lines of code in repsitory3(repo-3)

REPO   : It is a folder where we store our code
index.html: it is a basic file for every application

v1 --- > index.html
v2 --- > index.html
v3 --- > index.html 

> CVCS: CENTRALIZED VERSION CONTROL SYSTEM
  EX: SVN: it can store code on a single repo.

> DVCS: DISTRIBUTED VERSION CONTROL SYSTEM
  EX: GIT: it can store code on Multiple repo.

> ROLLBACK: Going back to the previous version of the application

>>Git Stages:
 WORKING DIRECTORY: where we write our source code
 STAGING AREA : we track files here
 REPOSITORY : Where we stoore tracked source code

>>WORKING WITH GIT:
create a ec2 server:
> mkdir swiggy                          : to create directory
> cd swiggy                             : to go inside the directory

> yum install git -y                    : to install git og latest version (yum = package manager, install = action , git = package name , -y= yes)
> git -v                                : to check version
> git init                              : to install .git (local repo)

> vim index.html (content is optional)  : to ceate file
> git status                            : to check status
> git add index.html                    : to track file
> git status                            : to check status
> git commit -m "commit-1" index.html   : to store file

   flow-> create a file ==> add ==> commit

> git log                               : to show commits
> git log -2                            : to show last two commits
> git log --oneline                     : to show commits in single line
> git log -2 --oneline                  : to show last two commits in single line



9th:----

>>CONFIGURATION USER AND EMAIL

> git config user.name "Durvesh"
> git config user.email "durvesh@gmail.com"

NOTE: this user and email will be replicated to the new commits only.

> git show                   : to show the files which are attached to commits
> git log --oneline          : to show commits in a one line
> git show commit_id         : to show files according to commit_id(commit address)

>>BRANCHES :
- It is a individual line of development
- developers right the code on branches
- initially branches we create on a git
- after write source code on git we push to github
- Default branch is Master
Note:- when we do a iniatl commit the only default branch will be created.

Dev --> Git(Movies branch) --> code --> github

>> COMMANDS:

> git branch                                  : to list the branches
> git branch movies                           : to create the branch movies
> git checkout movies                         : to switch between the branches
> git checkout -b dth                         : to create branch dth and switch dth at the sane time
> git branch -m old_branch new_Branch         : to rename a branch
> git branch -D recharge                      : to delete a branch

PUSH commands:
> git init
> git add README.md
> git commit -m "first commit"
> git branch -M main
> git remote add origin https://github.com/Durvesh2003/file444.git
> git push -u origin main


Note: to recover the delete branch-
> git pull                                    : it will get the branch from GitHub to git
> git pull origin recharge
> git checkout recharge

>>PROCESS to push branch to GitHub
   > git branch movies                    : to create movies branch
   > git checkout movies                  : to switch branch to movies
   > touch movies{1..5}                   : to create files
   > git add movies*                      : add
   > git commit -m "dev-1" movies*        : commit

  Now push the code to GitHub:
   Create a repo
   > git remote add origin 

  PUSH: to send files from Git to Github 
  local: .git & remote: paytm.git
  > git remote add origin https://github.com/Durvesh2003/file444.git
  > git push origin movies
    (after this command it will say "everything upto date' and files will visible on githup repo)
  

  TOKEN GENERATION: 
   account -- > settings -- >developer settings -- > PAT -- > Classic -- >Generate new token -- > classic -- > name: abcd -- > select 6 options -- > generate 
   Note: it will be visible only once


10th:---

>>process to push 
- create branch 
- switch to branch
- Create files
- add
- commit
- push

>> Commands<<
> git branch                                            : to list the branches
> git branch movies                                     : to create branch movies
> git checkout movies                                   : to switch between branches
> git branch -b dth                                     : to create dth and switch to it at same time
> git brach -m old new                                  : to rename the branch
> git branch -D Train                                   : to delete a branch(i.e Train)

>NOTE: to recover the deleted branch

GIT PULL:it will get branch from github to git
> git pull origin Train 
 or
> git checkout Train

GIT IGNORE : it will not track the files which we want
> touch java{1..5}
> vim .gitignore
inside content  --> java1  --> :wq
> git status
 you cant see the file java1


GIT RESTORE: to untrack the tracked file
> touch raham
> git status
> git add raham
> git status
> git restore --staged raham
> git status

GIT BACK THE DELETEd FILE:
Note: we caan restore only Tracked file

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
HISTORY:

 1  df -h
    2  cd cd
    3  cd /
    4  cd /
    5  du -sh
    6  ll
    7  cd
    8  yum install git maven docker httpd tree htop -y
    9  touch file{1..10
   10  rm -rf file\{1..10
   11  rm -rf file\{1..10}
   12  ll
   13  touch file{1..10}
   14  vim file1
   15  rm -rf *
   16  mkdir paytm
   17  cd paytm/
   18  ls -al
   19  git init
   20  touch index.html
   21  git add index.html
   22  git config user.name "raham"
   23  git config user.email "raham@gmail.com"
   24  git commit -m "commit-1" index.html
   25  git branch
   26  git branch movies
   27  git branch
   28  git checkout movies
   29  touch movies{1..5}
   30  git add movies*
   31  git commit -m "dev-1" movies*
   32  git remote add origin https://github.com/RAHAMSHAIK007/1045paytm.git
   33  git push origin movies
   34  git branch
   35  git branch train
   36  git branch
   37  git checkout train
   38  git branch
   39  touch train{1..5}
   40  git add train*
   41  git commit -m "dev-2" train*
   42  git push origin train
   43  ll
   44  git branch
   45  git checkout -b dth
   46  git branch
   47  ll
   48  touch dth{1..5}
   49  git add dth*
   50  git commit -m "dev-3" dth*
   51  git push origin dth
   52  git checkout -b recharge
   53  touch recharge{1..5}
   54  git add recharge*
   55  git commit -m "dev-4" recharge*
   56  git push origin recharge
   57  ll
   58  git status
   59  touch java{1..5}
   60  git status
   61  vim .gitignore
   62  git status
   63  vim .gitignore
   64  git status
   65  ll
   66  git add *
   67  ll
   68  git status
   69  touch python{1..5}
   70  git status
   71  vim .gitignore
   72  git status
   73  ll
   74  git branch
   75  git branch -m master raham
   76  git branch
   77  git branch -m raham main
   78  git branch
   79  git branch -m main master
   80  git branch
   81  ll
   82  git push origin movies
   83  git branch
   84  git branch -D recharge
   85  git checkout movies
   86  git branch -D recharge
   87  git branch
   88  git pull origin recharge
   89  git branch
   90  git checkout recharge
   91  git branch
   92  ll
   93  git branch
   94  git branch -D movies
   95  git branch
   96  git pull origin movies
   97  ll
   98  git branch
   99  git checkout movies
  100  git branch
  101  touch raham
  102  git status
  103  git add raham
  104  git status
  105  git restore --staged raham
  106  git status
  107  git add raham
  108  git status
  109  git restore --staged raham
  110  git status
  111  rm -f raham
  112  git restore raham
  113  ll
  114  git status
  115  cd
  116  mkdir abcd
  117  cd abcd/
  118  touch file1
  119  git add file1
  120  git init
  121  git add file1
  122  ll
  123  rm -f file1
  124  git restore file1
  125  ll
  126  touch file2
  127  git status
  128  rm -f file
  129  rm -f file2
  130  git restore file2
  131  ll
  132  touch file{1..100}
  133  git status
  134  git add *
  135  git status
  136  rm -f *
  137  git restore *
  138  ls
  139  cd
  140  cd paytm/
  141  git push origin train
  142  git push origin master movies
  143  history
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++


11th:----

MERGE:
adding the files one branch to another branch
> git merge branch_name

REBASE:
adding the files between one branch to another branch
> git rebase branch_name

MERGE VS REBASE:
- merge will show files ,rebase will not show files
- merge will not show branches, rebase will show branches
- merge will show entire history,rebase will not

STASH: 
- to hide the files which are not commited
- note: file need to be tracked but not comitted

touch file2
git stash
git stash apply
git stash list
git stash clear
git stash pop (clears last stash)
git stash pop --(index/commit_id)              : to remove particular stash 
git stash -h                                   : to show all stash commands

HISTORY:

 1  cd p
    2  ll
    3  cd swiggy/
    4  ll
    5  git branch
    6  git branch -D master
    7  git branch -D dth
    8  ll
    9  git branch
   10  git pull origin dth
   11  cd
   12  git clone https://github.com/RAHAMSHAIK007/1045paytm.git
   13  ll
   14  cd 1045paytm/
   15  git branch
   16  git checkout train
   17  git branch
   18  git checkout dth
   19  git branch
   20  git checkout recharge
   21  ll
   22  git branch
   23  git branch -D dth
   24  git branch
   25  git pull origin dth
   26  git checkout dth
   27  git branch
   28  cd
   29  mkdir abcd
   30  cd abcd/
   31  git init
   32  ll
   33  touch java1
   34  git add java1
   35  git commit -m "java commits" java1
   36  ll
   37  touch java2
   38  git status
   39  git add java2
   40  git status
   41  ll
   42  git stash
   43  ll
   44  git stash apply
   45  ll
   46  git stash
   47  ll
   48  git stash apply
   49  ll
   50  git stash list
   51  git stash clear
   52  git stash list
   53  git stash -h
   54  git stash --help
   55  git stash list
   56  git stash
   57  git stash list
   58  history

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

12th:


> git branch -m old_name New_name                    : To rename the branch

MERGE CONFLICT:
-when we try to merge 2 branches with same file name and different content then conflict will raise
so we need to resolve conflict manually

CHEERY_PICK:
> git cheery-pick commit_id                          : to merge specific fis from one branh to another using commit_id
- we can merge only specific files from one branch to another with the help of commit_id

SHOW
> git show python1          : to show how much time python1 file is commited

> git log --patch
> git log --stat
